/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Petstore API (JSON Server)
 * A fake REST API for fetching pets using json-server.
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

export interface Pet {
  id?: number;
  name?: string;
  type?: string;
  age?: number;
}

/**
 * Returns a list of pets from the store.
 * @summary Get all pets
 */
export const getPets = <TData = AxiosResponse<Pet[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:4000/pets`,options
    );
  }

export type GetPetsResult = AxiosResponse<Pet[]>


export const getGetPetsResponseMock = (): Pet[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))


export const getGetPetsMockHandler = (overrideResponse?: Pet[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Pet[]> | Pet[])) => {
  return http.get('*/pets', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetPetsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getPetstoreAPIJSONServerMock = () => [
  getGetPetsMockHandler()]
